Newspeak3
'Benchmarks'
class GUIBenchmarkRunner packageUsing: ns = (
(*Infrastructure to run a set of benchmarks and gather average run times.

Copyright 2012 Google Inc.
Copyright 2013 Ryan Macnak

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0*)|
	benchmarks = {
		ns ClosureDefFibonacci.
		ns ClosureFibonacci.
		ns DeltaBlue.
		ns MethodFibonacci.
		ns NLRImmediate.
		ns NLRLoop.
		ns ParserCombinators.
		ns Richards.		
		ns SlotRead.
		ns SlotWrite.
		ns Splay.
	}.
|)
(
class Benchmarking usingPlatform: p = (|
private Time = p time Time.
private List = p collections OrderedCollection.
private Subject = p hopscotch core Subject.
private Presenter = p hopscotch core Presenter.
private HopscotchWindow = p hopscotch core HopscotchWindow.
private cachedPlatform = p.
private Smalltalk = [p squeak Smalltalk] on: Error do: [:e | nil].
|)
(
class BenchmarkPresenter onSubject: s = Presenter onSubject: s ()
('as yet unclassified'
definition = (
	^column: (benchmarks collect: [:benchmark | 
		initially: (label: benchmark name, ': ...') deferred: [
			| b score |	
			b:: benchmark usingPlatform: cachedPlatform.
			measure: [b bench] forAtLeast: 300.
			[Smalltalk garbageCollect] on: Error do: [:e | e].
			score:: measure: [b bench] forAtLeast: 2000.
			label: benchmark name, ': ', score
		]
	])
)) : ()
class BenchmarkSubject = Subject onModel: nil ()
('as yet unclassified'
createPresenter = (
	^BenchmarkPresenter onSubject: self
)
public title = (
	^'Newspeak Benchmarks'
)) : ()'as yet unclassified'
measure: block forAtLeast: milliseconds = (
	| runs start elapsed score |
	runs:: 0.
	start:: Time millisecondClockValue.
	
	[block value.
	runs:: runs + 1.
	elapsed:: Time millisecondClockValue - start.
	elapsed < milliseconds] whileTrue.
	
	score:: (round: runs * 1000.0 / elapsed to: 0.1) asFloat.
	^score printString
)
public report = (
	HopscotchWindow openSubject: BenchmarkSubject new.
)
round: n to: quantum = (
	^(n // quantum) * quantum
)) : ()'as yet unclassified'
public main: p args: argv = (
	(Benchmarking usingPlatform: p) report
)) : ()