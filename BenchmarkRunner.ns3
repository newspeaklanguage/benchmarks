Newspeak3
'Benchmarks'
class BenchmarkRunner packageUsing: ns = (
(*Infrastructure to run a set of benchmarks and gather average run times.

Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0*)|
	benchmarks = {
		ns InstVarRead.
		ns InstVarWrite.
		ns MethodFibonacci.
		ns ClosureFibonacci.
		ns NonlocalReturnImmediately.
		ns NonlocalReturnInLoop.
		ns Splay.
		ns Richards.
		ns DeltaBlue.
		ns DeltaBlueOpt.
	}.
|)
(
class Benchmarking usingPlatform: p = (|
Time = p time Time.
List = p collections OrderedCollection.
cachedPlatform = p.
|)
('as yet unclassified'
measure: block forAtLeast: milliseconds = (
	| runs start elapsed score |
	runs:: 0.
	start:: Time millisecondClockValue.
	
	[block value.
	runs:: runs + 1.
	elapsed:: Time millisecondClockValue - start.
	elapsed < milliseconds] whileTrue.
	
	score:: (round: runs * 1000.0 / elapsed to: 0.1) asFloat.
	^score printString
)
report = (
	benchmarks do: [:benchmark |
		| b score |
		b:: benchmark usingPlatform: cachedPlatform.

		self measure: [b bench] forAtLeast: 500.
		score:: measure: [b bench] forAtLeast: 3000.
		(benchmark name, ': ', score) out.
	].
)
round: n to: quantum = (
	^(n // quantum) * quantum
)
summarize: results = (
	| sum logSum mean geomMean sumSquare stdDev |
	sum:: logSum:: 0.
	results do:
		[:sample |
		sum: sum + sample.
		logSum: logSum + sample ln].
	mean: sum / results size.
	geomMean: (logSum / results size) exp.
	
	sumSquare: 0.
	results do:
		[:sample |
		| error = sample - mean. |
		sumSquare: sumSquare + (error * error)].
	stdDev:: (sumSquare / results size) sqrt.
	
	mean:: (round: mean to: 0.1) asFloat.
	geomMean:: (round: geomMean to: 0.1) asFloat.
	stdDev:: (round: stdDev to: 0.1) asFloat.
	
	^'mean=',mean printString,
	' geom=',geomMean printString,
	' stddev=', stdDev printString
)) : ()'as yet unclassified'
main: p args: argv = (
	(Benchmarking usingPlatform: p) report
)
oldmain: p args: argv = (
	| 
	Time = p time Time.
	|
	
	benchmarks do: [:benchmark |
		| b logSum n m desc geomMean |
		b:: benchmark usingPlatform: p.

		logSum:: 0.
		n:: 19.
		m:: 5.

		n timesRepeat: [
			| time |
			time:: (p time Time millisecondsToRun: [
				m timesRepeat: [b bench]]).
			logSum:: logSum + time ln.
		].
		geomMean:: (logSum / n) exp / m.
		(*b out.*)
		(benchmark name,' in ', geomMean printString, 'ms') out.
	].
)) : ()